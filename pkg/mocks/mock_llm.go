// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/klauern/notion-table-reader/pkg (interfaces: LLMClient,OpenAIClient)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_llm.go -package=mocks . LLMClient,OpenAIClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pkg "github.com/klauern/notion-table-reader/pkg"
	openai "github.com/sashabaranov/go-openai"
	gomock "go.uber.org/mock/gomock"
)

// MockLLMClient is a mock of LLMClient interface.
type MockLLMClient struct {
	ctrl     *gomock.Controller
	recorder *MockLLMClientMockRecorder
}

// MockLLMClientMockRecorder is the mock recorder for MockLLMClient.
type MockLLMClientMockRecorder struct {
	mock *MockLLMClient
}

// NewMockLLMClient creates a new mock instance.
func NewMockLLMClient(ctrl *gomock.Controller) *MockLLMClient {
	mock := &MockLLMClient{ctrl: ctrl}
	mock.recorder = &MockLLMClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLLMClient) EXPECT() *MockLLMClientMockRecorder {
	return m.recorder
}

// CreateChatCompletion mocks base method.
func (m *MockLLMClient) CreateChatCompletion(arg0 context.Context, arg1 openai.ChatCompletionRequest) (openai.ChatCompletionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatCompletion", arg0, arg1)
	ret0, _ := ret[0].(openai.ChatCompletionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatCompletion indicates an expected call of CreateChatCompletion.
func (mr *MockLLMClientMockRecorder) CreateChatCompletion(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatCompletion", reflect.TypeOf((*MockLLMClient)(nil).CreateChatCompletion), arg0, arg1)
}

// IdentifyTags mocks base method.
func (m *MockLLMClient) IdentifyTags(arg0 *pkg.TagInput, arg1 []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdentifyTags", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IdentifyTags indicates an expected call of IdentifyTags.
func (mr *MockLLMClientMockRecorder) IdentifyTags(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdentifyTags", reflect.TypeOf((*MockLLMClient)(nil).IdentifyTags), arg0, arg1)
}

// RequestChatCompletion mocks base method.
func (m *MockLLMClient) RequestChatCompletion(arg0 []openai.ChatCompletionMessage) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestChatCompletion", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestChatCompletion indicates an expected call of RequestChatCompletion.
func (mr *MockLLMClientMockRecorder) RequestChatCompletion(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestChatCompletion", reflect.TypeOf((*MockLLMClient)(nil).RequestChatCompletion), arg0)
}

// MockOpenAIClient is a mock of OpenAIClient interface.
type MockOpenAIClient struct {
	ctrl     *gomock.Controller
	recorder *MockOpenAIClientMockRecorder
}

// MockOpenAIClientMockRecorder is the mock recorder for MockOpenAIClient.
type MockOpenAIClientMockRecorder struct {
	mock *MockOpenAIClient
}

// NewMockOpenAIClient creates a new mock instance.
func NewMockOpenAIClient(ctrl *gomock.Controller) *MockOpenAIClient {
	mock := &MockOpenAIClient{ctrl: ctrl}
	mock.recorder = &MockOpenAIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenAIClient) EXPECT() *MockOpenAIClientMockRecorder {
	return m.recorder
}

// CreateChatCompletion mocks base method.
func (m *MockOpenAIClient) CreateChatCompletion(arg0 context.Context, arg1 openai.ChatCompletionRequest) (openai.ChatCompletionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatCompletion", arg0, arg1)
	ret0, _ := ret[0].(openai.ChatCompletionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatCompletion indicates an expected call of CreateChatCompletion.
func (mr *MockOpenAIClientMockRecorder) CreateChatCompletion(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatCompletion", reflect.TypeOf((*MockOpenAIClient)(nil).CreateChatCompletion), arg0, arg1)
}
