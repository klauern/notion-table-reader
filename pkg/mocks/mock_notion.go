// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/klauern/notion-table-reader/pkg/notion (interfaces: NotionClient,NotionTableReader)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_notion.go -package=mocks . NotionClient,NotionTableReader
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	notion "github.com/dstotijn/go-notion"
	notion0 "github.com/klauern/notion-table-reader/pkg/notion"
	gomock "go.uber.org/mock/gomock"
)

// MockNotionClient is a mock of NotionClient interface.
type MockNotionClient struct {
	ctrl     *gomock.Controller
	recorder *MockNotionClientMockRecorder
}

// MockNotionClientMockRecorder is the mock recorder for MockNotionClient.
type MockNotionClientMockRecorder struct {
	mock *MockNotionClient
}

// NewMockNotionClient creates a new mock instance.
func NewMockNotionClient(ctrl *gomock.Controller) *MockNotionClient {
	mock := &MockNotionClient{ctrl: ctrl}
	mock.recorder = &MockNotionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotionClient) EXPECT() *MockNotionClientMockRecorder {
	return m.recorder
}

// FindBlockChildrenByID mocks base method.
func (m *MockNotionClient) FindBlockChildrenByID(arg0 context.Context, arg1 string, arg2 *notion.PaginationQuery) (notion.BlockChildrenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBlockChildrenByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(notion.BlockChildrenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBlockChildrenByID indicates an expected call of FindBlockChildrenByID.
func (mr *MockNotionClientMockRecorder) FindBlockChildrenByID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBlockChildrenByID", reflect.TypeOf((*MockNotionClient)(nil).FindBlockChildrenByID), arg0, arg1, arg2)
}

// FindDatabaseByID mocks base method.
func (m *MockNotionClient) FindDatabaseByID(arg0 context.Context, arg1 string) (notion.Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDatabaseByID", arg0, arg1)
	ret0, _ := ret[0].(notion.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDatabaseByID indicates an expected call of FindDatabaseByID.
func (mr *MockNotionClientMockRecorder) FindDatabaseByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDatabaseByID", reflect.TypeOf((*MockNotionClient)(nil).FindDatabaseByID), arg0, arg1)
}

// FindPageByID mocks base method.
func (m *MockNotionClient) FindPageByID(arg0 context.Context, arg1 string) (notion.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPageByID", arg0, arg1)
	ret0, _ := ret[0].(notion.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPageByID indicates an expected call of FindPageByID.
func (mr *MockNotionClientMockRecorder) FindPageByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPageByID", reflect.TypeOf((*MockNotionClient)(nil).FindPageByID), arg0, arg1)
}

// QueryDatabase mocks base method.
func (m *MockNotionClient) QueryDatabase(arg0 context.Context, arg1 string, arg2 *notion.DatabaseQuery) (notion.DatabaseQueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryDatabase", arg0, arg1, arg2)
	ret0, _ := ret[0].(notion.DatabaseQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDatabase indicates an expected call of QueryDatabase.
func (mr *MockNotionClientMockRecorder) QueryDatabase(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDatabase", reflect.TypeOf((*MockNotionClient)(nil).QueryDatabase), arg0, arg1, arg2)
}

// Search mocks base method.
func (m *MockNotionClient) Search(arg0 context.Context, arg1 *notion.SearchOpts) (notion.SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(notion.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockNotionClientMockRecorder) Search(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockNotionClient)(nil).Search), arg0, arg1)
}

// UpdatePage mocks base method.
func (m *MockNotionClient) UpdatePage(arg0 context.Context, arg1 string, arg2 notion.UpdatePageParams) (notion.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePage", arg0, arg1, arg2)
	ret0, _ := ret[0].(notion.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePage indicates an expected call of UpdatePage.
func (mr *MockNotionClientMockRecorder) UpdatePage(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePage", reflect.TypeOf((*MockNotionClient)(nil).UpdatePage), arg0, arg1, arg2)
}

// MockNotionTableReader is a mock of NotionTableReader interface.
type MockNotionTableReader struct {
	ctrl     *gomock.Controller
	recorder *MockNotionTableReaderMockRecorder
}

// MockNotionTableReaderMockRecorder is the mock recorder for MockNotionTableReader.
type MockNotionTableReaderMockRecorder struct {
	mock *MockNotionTableReader
}

// NewMockNotionTableReader creates a new mock instance.
func NewMockNotionTableReader(ctrl *gomock.Controller) *MockNotionTableReader {
	mock := &MockNotionTableReader{ctrl: ctrl}
	mock.recorder = &MockNotionTableReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotionTableReader) EXPECT() *MockNotionTableReaderMockRecorder {
	return m.recorder
}

// FetchPages mocks base method.
func (m *MockNotionTableReader) FetchPages(arg0 string, arg1 bool) ([]notion0.PageDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPages", arg0, arg1)
	ret0, _ := ret[0].([]notion0.PageDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPages indicates an expected call of FetchPages.
func (mr *MockNotionTableReaderMockRecorder) FetchPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPages", reflect.TypeOf((*MockNotionTableReader)(nil).FetchPages), arg0, arg1)
}

// FindBlockChildrenByID mocks base method.
func (m *MockNotionTableReader) FindBlockChildrenByID(arg0 context.Context, arg1 string, arg2 *notion.PaginationQuery) (notion.BlockChildrenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBlockChildrenByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(notion.BlockChildrenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBlockChildrenByID indicates an expected call of FindBlockChildrenByID.
func (mr *MockNotionTableReaderMockRecorder) FindBlockChildrenByID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBlockChildrenByID", reflect.TypeOf((*MockNotionTableReader)(nil).FindBlockChildrenByID), arg0, arg1, arg2)
}

// FindDatabaseByID mocks base method.
func (m *MockNotionTableReader) FindDatabaseByID(arg0 context.Context, arg1 string) (notion.Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDatabaseByID", arg0, arg1)
	ret0, _ := ret[0].(notion.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDatabaseByID indicates an expected call of FindDatabaseByID.
func (mr *MockNotionTableReaderMockRecorder) FindDatabaseByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDatabaseByID", reflect.TypeOf((*MockNotionTableReader)(nil).FindDatabaseByID), arg0, arg1)
}

// FindPageByID mocks base method.
func (m *MockNotionTableReader) FindPageByID(arg0 context.Context, arg1 string) (notion.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPageByID", arg0, arg1)
	ret0, _ := ret[0].(notion.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPageByID indicates an expected call of FindPageByID.
func (mr *MockNotionTableReaderMockRecorder) FindPageByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPageByID", reflect.TypeOf((*MockNotionTableReader)(nil).FindPageByID), arg0, arg1)
}

// QueryDatabase mocks base method.
func (m *MockNotionTableReader) QueryDatabase(arg0 context.Context, arg1 string, arg2 *notion.DatabaseQuery) (notion.DatabaseQueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryDatabase", arg0, arg1, arg2)
	ret0, _ := ret[0].(notion.DatabaseQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDatabase indicates an expected call of QueryDatabase.
func (mr *MockNotionTableReaderMockRecorder) QueryDatabase(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDatabase", reflect.TypeOf((*MockNotionTableReader)(nil).QueryDatabase), arg0, arg1, arg2)
}

// Search mocks base method.
func (m *MockNotionTableReader) Search(arg0 context.Context, arg1 *notion.SearchOpts) (notion.SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(notion.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockNotionTableReaderMockRecorder) Search(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockNotionTableReader)(nil).Search), arg0, arg1)
}

// TagPage mocks base method.
func (m *MockNotionTableReader) TagPage(arg0 string, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagPage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagPage indicates an expected call of TagPage.
func (mr *MockNotionTableReaderMockRecorder) TagPage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagPage", reflect.TypeOf((*MockNotionTableReader)(nil).TagPage), arg0, arg1)
}

// UpdatePage mocks base method.
func (m *MockNotionTableReader) UpdatePage(arg0 context.Context, arg1 string, arg2 notion.UpdatePageParams) (notion.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePage", arg0, arg1, arg2)
	ret0, _ := ret[0].(notion.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePage indicates an expected call of UpdatePage.
func (mr *MockNotionTableReaderMockRecorder) UpdatePage(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePage", reflect.TypeOf((*MockNotionTableReader)(nil).UpdatePage), arg0, arg1, arg2)
}
